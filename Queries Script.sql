--1. Retrieve All Movies in the Database

SELECT *
FROM film

SELECT title
FROM film

--2. Retrieve movies with rental duration of more than 5 days

SELECT title
FROM film
WHERE rental_duration > 5

SELECT title, rental_duration
FROM film
WHERE rental_duration > 5 

-- 3. Find the total number of movies in the database.

SELECT COUNT(film_id) AS "total movies"
FROM film

SELECT COUNT(title) AS "total movies"
FROM film

-- 4. Find the number of movies in 
-- each rating category (e.g., PG, R)
---(ALIASES also used)

SELECT rating, COUNT(film_id) AS "number of movies"
FROM film
GROUP BY rating

SELECT rating, COUNT(title) AS "number of movies"
FROM film
GROUP BY rating
ORDER BY "number of movies" DESC

-- 5. Calculate the total revenue 
-- generated by each staff member, aliases

SELECT s.first_name || ' ' || s.last_name AS staff_name, SUM(p.amount) AS total_revenue
FROM staff s
JOIN payment p ON s.staff_id = p.staff_id
GROUP BY s.first_name, s.last_name

-- 6. Find the number of customers in each store. 

SELECT store_id, COUNT(customer_id) AS num_of_customers
FROM customer
GROUP BY store_id

-- How can we classify different customers based on their spending tiers
-- low spender less 70
-- middle spender between 70 and 100
-- high spender greater than 100

SELECT customer_id, sum(amount) AS "payment"  ---- to help us grade our spending into tiers
FROM payment
GROUP BY customer_id
ORDER BY "payment" DESC


SELECT c.first_name ||' '|| c.last_name AS full_name, p.customer_id, SUM(p.amount) AS customer_spend,
CASE WHEN SUM(p.amount)>100 THEN 'High Spender'
	WHEN SUM(p.amount) BETWEEN 70 AND 100 THEN 'Middle Spender'
	ELSE 'Low Spender' 
	END AS "Spending Tier"
FROM payment p
JOIN customer c ON c.customer_id = p.customer_id
GROUP BY c.first_name, c.last_name, p.customer_id


--- top 10 most rented movies and number of times rented

SELECT f.title, COUNT(r.rental_id) AS num_of_rent
FROM film f
JOIN inventory i ON f.film_id = i.film_id
JOIN rental r ON r.inventory_id = i.inventory_id
GROUP BY f.title
ORDER BY num_of_rent DESC
LIMIT 10

-- Are there any customers who have made payment
--without any recorded rentals

SELECT c.customer_id, c.first_name || ' ' || c.last_name AS full_name 
FROM customer c
JOIN payment p ON c.customer_id = p.customer_id
WHERE p.payment_id IS NOT NULL AND p.rental_id IS NULL


-- Which staff made the most rental
--and how much revenue have they handled


SELECT p.staff_id, s.first_name ||' '||s.last_name AS staff_name, SUM(p.amount) AS revenue, COUNT(p.rental_id) AS num_rent
FROM payment p
JOIN staff s ON p.staff_id = s.staff_id
GROUP BY p.staff_id, s.first_name, s.last_name
ORDER BY num_rent DESC

SELECT s.staff_id, s.first_name ||' '||s.last_name AS staff_name, SUM(p.amount) AS revenue, COUNT(r.rental_id) AS num_rent
FROM staff s
JOIN payment p ON s.staff_id = p.staff_id
JOIN rental r ON s.staff_id = p.staff_id
GROUP BY s.staff_id, s.first_name, s.last_name
ORDER BY num_rent DESC

-- Average Rental Duration Per Store
--how does it vary between stores?

SELECT i.store_id, AVG(f.rental_duration) AS "average rental duration"
FROM film f
JOIN inventory i ON i.film_id = f.film_id
GROUP BY i.store_id

SELECT i.store_id, ROUND(AVG(f.rental_duration),3) AS "average rental duration" 
JOIN inventory i ON i.film_id = f.film_id
GROUP BY i.store_id

--ORDER BY  "average rental duration"

-- How much total revenue does each store generate
--and what percentage comes from late fee
--and how much comes from late fee
-- late fee is amount paid for movies rented for more than 7 days

SELECT SUM(p.amount) AS total_revenue, 
CASE WHEN DATE_PART('day', r.return_date - r.rental_date) < 7 THEN 0
ELSE SUM(p.amount) 
END AS "Late Fee"
FROM payment p
JOIN rental r ON r.rental_id=p.rental_id
GROUP BY r.return_date, r.rental_date

SELECT s.store_id,
SUM(p.amount) AS total_revenue, 
CASE WHEN DATE_PART('day', r.return_date - r.rental_date) < 7 THEN 0 
ELSE SUM(p.amount) 
END AS "Late Fee"
--also written as CASE WHEN r.return_date > r.rental_date + INTERVAL '7 days' THEN SUM(p.amount)
--ELSE O
--END AS "Late Fee"
FROM payment p
JOIN rental r ON r.rental_id=p.rental_id
JOIN staff s ON r.staff_id = s.staff_id
GROUP BY r.return_date, r.rental_date, s.store_id
ORDER BY s.store_id DESC

WITH revenue_late_fee AS (
    SELECT 
        s.store_id,
        SUM(p.amount) AS total_revenue, 
        CASE 
            WHEN DATE_PART('day', r.return_date - r.rental_date) < 7 THEN 0 
            ELSE SUM(p.amount) 
        END AS late_fee,
        DATE_PART('day', r.return_date - r.rental_date) AS rental_days
    FROM payment p
    JOIN rental r ON r.rental_id = p.rental_id
    JOIN staff s ON r.staff_id = s.staff_id
    GROUP BY r.return_date, r.rental_date, s.store_id
)
SELECT 
    store_id,
    SUM(total_revenue) AS total_revenue,
    SUM(late_fee) AS total_late_fee,
    COUNT(*) AS total_records,
    COUNT(*) FILTER (WHERE late_fee = 0) AS zero_late_fee_count,
    ROUND(
        100.0 * COUNT(*) FILTER (WHERE late_fee = 0) / COUNT(*), 
        2
    ) AS percent_zero_late_fee
FROM revenue_late_fee
GROUP BY store_id
ORDER BY store_id DESC;

